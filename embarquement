

void emabarquement(struct Vol tab1[], int taille){
    //heure_actuelle :
    int heure = HeureFormattee();
    int heureD, heureF;
    int heure_deb;
    int heure_fin;

    heurD = heure -10;
    if ((heureD%100)>= 60){
        heureD = heure -40;
    }
    if (heureD < 600){
        heureD = 600;
    }

    heureF = heure + 30;
    if ((heureF%100)>= 60){
        heureF += 40;
    }
    if ((heureF)>= 2200){
            heureF = 2200;


    for (int i=0;i<taille;i++){
        heure_deb =  atoi(tab1[i].heure_debut_enregistrment);
        if ((heureD <= heure_deb) && (heureF >= heure_deb)){
            printf("SAlle embarquement : %s\n",tab1[i].salle_embarquement);
            int numero_vol =atoi(tab1[i].numero_vol);
            afficherPassagersNUMVOL(numero_vol);
        }
    }


}



void afficherPassagersNUMVOL( int numero_vol){
    struct passager *vol_array = (struct passager *)malloc(100 * sizeof(struct passager));


    if (vol_array == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return ;
    }





    FILE* fp = fopen(fichierCSV, "r");

    int indice = 0;
    struct passager tab[100];

    if (fp != NULL){
       // printf("feur");

        char chaine[1024];
        while (fgets(chaine, 1024 ,fp)!= NULL){

          //  printf("F");
            char *token = strtok(chaine,",");
            printf("%s",token);
            int tok = atoi(token);
            if (tok == numero_vol){
                for(int i=0;i<11;i++){
                    token= strtok(NULL,",");
                }
                printf("%s",token);
                int j=0;
                while (token != NULL){
                   // printf("gyat");
                    switch (j){
                        case 0 : strcpy(tab[indice].nom, token); j++; token = strtok(NULL, ",");  break;
                        case 1 : strcpy(tab[indice].prenom, token);j++;token = strtok(NULL, ",");   break;
                        case 2 : strcpy(tab[indice].date_naissance, token); j++; token = strtok(NULL, ",");  break;
                        case 3 : strcpy(tab[indice].numero_siege, token);j++;token = strtok(NULL, ";"); break;
                        case 4 : tab[indice].prix_billet = atoi(token);j=0;token = strtok(NULL, ",");indice++;break;
                        default : printf("Probleme"); break;

                    }
                }
            }
        }
    }



   // printf("fin\n");
    // printf("%d",tab[indice-1].prix_billet);
    char *chaine = tab[0].nom +1;
    strcpy(tab[0].nom, chaine);
   // printf("%s",tab[0].nom);
   // printf("%d",indice -1);
    // affichage2(tab,indice);


   // printf("-------------------------------------");
    /*
    char *chainee = tab[indice-1].prix_billet - 1;
    strcpy(tab[indice-1].prix_billet, chainee);
    printf("%s\n",chainee);
    printf("%s",tab[indice-1].prix_billet);
    */

    tri_selection2(tab, indice);
    affichage2(tab,indice);
    return;



}
