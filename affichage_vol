#include <stdio.h>

void echanger(int tab[], int x, int y) {
    int temp = tab[x];
    tab[x] = tab[y];
    tab[y] = temp;
}

void tabindice(int tab[], int n) {
    for (int i = 0; i < n; i++) {
        tab[i] = i;
    }
}

int indice_du_mini_a_partir_de(int tab[], int i, int h, int n) {
    int h_max = (h + 300 > 2200) ? 2200 : h + 300;



    int i_mini = i;
    while ((tab[i_mini] < h || tab[i_mini] > h_max) && i < n) {
        i_mini = i;
        i++;
    }


    while (i < n) {
        if (tab[i_mini] > tab[i] && tab[i] >= h) {
            i_mini = i;
        }
        i++;
    }

    if (tab[i_mini] > h_max || tab[i_mini] < h) {
        i_mini = -1;
    }
    return i_mini;
}

void echanger_grandtableau(int tab[10][6], int tab_indice[]) {
    for (int y = 0; y < 9; y++) {
        int tab_sub[6] = {0};
        for (int i = 0; i < 9; i++) {
            tab_sub[tab_indice[i]] = tab[y][i];
        }
        for (int i = 0; i < 9; i++) {
            tab[y][i] = tab_sub[i];
        }
    }
}

void tri_selection_croissant(int tab[10][6], int h, int n) {
    int i = 0;
    int k = 1;
    int tab_indice[10] = {0};
    tabindice(tab_indice, n);

    while (i < n - 1 && k) {
        int i_mini = indice_du_mini_a_partir_de(tab[9], i, h, n);

        if (i_mini != -1) {
            echanger(tab[9], i, i_mini);
            echanger(tab_indice, i, i_mini);
            i++;
        } else {
            k = 0;
        }
    }

    int indice_fin = i - 1;

    if (tab[9][n - 1] > h && tab[9][n - 1] < h + 300) {
        indice_fin = i;
    }



}

int main() {
    int tab1[10][6] = {
        {678, 5678, 78, 1, 2, 4},
        {678, 45, 4, 1, 2, 4},
        {2, 6, 8, 1, 2, 4},
        {0, 0, 0, 1, 2, 4},
        {678, 5678, 78, 1, 2, 4},
        {678, 45, 4, 1, 2, 4},
        {2, 6, 8, 1, 2, 4},
        {678, 5678, 78, 1, 2, 4},
        {678, 45, 4, 1, 2, 4},
        {700, 1200, 1700, 1100, 1000, 1500}
    };

    tri_selection_croissant(tab1, 1000, 6);
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 6; ++j) {
            printf("%d ", tab1[i][j]);
        }
        printf("\n");
    }

    return 0;
}
